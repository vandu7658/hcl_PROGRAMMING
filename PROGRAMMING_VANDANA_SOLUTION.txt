1. 
    Design a  ordered binary tree and then write an algorithm to print the traversal of leaves from right to left. That is your method traverseLeaves() should return leaves in the order Right to left. For example :

Return of traverseLeaves() will contain   leaves in the leaf in the below order 

 

          13 ->  7  ->4   ->1 



SOLUTION
import java.util.*;
  
class GFG
{
      
static class Node 
{ 
    int data; 
    Node left, right; 
}; 
  
static Node newNode(int data) 
{ 
    Node temp = new Node(); 
    temp.data = data; 
    temp.left = temp.right = null; 
    return temp; 
} 
  

static void printLeafNodes(Node root) 
{  
    if (root == null) 
        return; 
  
    if (root.left == null && root.right == null) 
    { 
        System.out.print( root.data +" "); 
        return; 
    } 
   
    if (root.right != null) 
        printLeafNodes(root.right); 
  
    if (root.left != null) 
        printLeafNodes(root.left); 
} 
  
public static void main(String args[])
{ 
    Node root = newNode(1); 
    root.left = newNode(2); 
    root.right = newNode(3); 
    root.left.left = newNode(4); 
    root.left.right = newNode(5); 
    root.right.left = newNode(6); 
    root.right.right = newNode(7); 
    root.left.left.left = newNode(8); 
    root.right.right.left = newNode(9); 
    root.left.left.left.right = newNode(10); 
  
    printLeafNodes(root); 
} 
} 


2. CSV file download and parsing and entering it into database

SOLUTION 
I know only this bit of the problem.  
method 1: 

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Main {

	private static String JDBC_CONNECTION_URL = 
			"xxxx@localhost:1500:MyDB";

	
	public static void main(String[] args) {
		try {

			CSVLoader loader = new CSVLoader(getCon());
			
			loader.loadCSV("C:\\employee.sql", "CUSTOMER", true);  
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static Connection getCon() {
		Connection connection = null;
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			connection = DriverManager.getConnection(JDBC_CONNECTION_URL);

		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return connection;
	}
}


using java class i.e. CSVLoader  and using parameterized constructor we object of java.sql.connection.
Three arguments of loadCSV is : path of CSV file , name of database, Whther database needs to be truncated before entering the next record in database.

uses OpenCSV library to load and parse CSV file .
uses the idea of Batching in JDBC to batch insert queries and execute them.
method 2:
using python
pandas libraries 


3.Design a  binary tree and then print the breadth first order traversal of this tree.
 In breadth first order traversal, we visit the nodes of same height first then go to nodes of next height or level. 

solution


class Node
{
    int data;
    Node left, right;
    public Node(int item)
    {
        data = item;
        left = right = null;
    }
}
  
class BinaryTree
{
    
    Node root;
  
    public BinaryTree()
    {
        root = null;
    }
  
  
    void printLevelOrder()
    {
        int h = height(root);
        int i;
        for (i=1; i<=h; i++)
            printGivenLevel(root, i);
    }
  
    int height(Node root)
    {
        if (root == null)
           return 0;
        else
        {
           
            int lheight = height(root.left);
            int rheight = height(root.right);
              
           
            if (lheight > rheight)
                return(lheight+1);
            else return(rheight+1); 
        }
    }
  
 
    void printGivenLevel (Node root ,int level)
    {
        if (root == null)
            return;
        if (level == 1)
            System.out.print(root.data + " ");
        else if (level > 1)
        {
            printGivenLevel(root.left, level-1);
            printGivenLevel(root.right, level-1);
        }
    }
      
  
    public static void main(String args[])
    {
       BinaryTree tree = new BinaryTree();
       tree.root= new Node(1);
       tree.root.left= new Node(2);
       tree.root.right= new Node(3);
       tree.root.left.left= new Node(4);
       tree.root.left.right= new Node(5);
         
       System.out.println("Level order traversal of binary tree is ");
       tree.printLevelOrder();
}

}